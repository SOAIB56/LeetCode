problem link: https://leetcode.com/problems/search-in-a-binary-search-tree/description/

solution:
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* searchBST(TreeNode* root, int val) {
        if(root== NULL) return NULL;
        if(root->val== val)
        {
            return root;
        }
        else
        {
             if(root->val< val)
            {
                return searchBST(root->right, val);
            }
            if(root->val>val)
            {
                return searchBST(root->left, val);
            }
        }
        return root;
    }
};



****************** Alternative solution***********
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
void check( TreeNode* root, int val, TreeNode* &nroot)
{
    if(root== NULL) return;
    if(root->val== val)
    {
        nroot= root;
        if(root->left)
        nroot->left= root->left;
        else nroot->left= NULL;
        if(root->right) nroot->right= root->right;
        else nroot->right= NULL;
    }
    check(root->left, val, nroot);
    check(root->right, val, nroot);
    // return nroot;
}
    TreeNode* searchBST(TreeNode* root, int val) {
        TreeNode* newroot= NULL;
         check(root, val, newroot);
        return newroot;
    }
};
