https://leetcode.com/problems/remove-nth-node-from-end-of-list/description/

/*
 * @lc app=leetcode id=19 lang=cpp
 *
 * [19] Remove Nth Node From End of List
 */

// @lc code=start
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void reverse ( ListNode*& head,  ListNode*cur)
    {
        if(cur->next == NULL)
        {
            head= cur;
            return;
        }
        reverse(head, cur->next);
        cur->next->next= cur;
        cur->next= NULL;
    }
    void delete_n_th(ListNode *& head,int n)
    {
          ListNode*temp= head;
          for (int i = 1; i < n-1; i++)
          {
            temp=temp->next;
          }
            ListNode* del= temp->next;
            // if(temp->next->next != NULL)
            // {
                
            // }
          temp->next=temp->next->next;
          delete del;  
    }
    int size(ListNode* head)
    {
        ListNode*temp=head;
        int cnt=0;
        while (temp != NULL)
        {
            cnt++;
           temp=temp->next;
        }
        return cnt;
        
    }
    void delete_from_head( ListNode*&head)
    {
         ListNode*del=head;
         head=head->next;
         delete del;

    }
    ListNode* removeNthFromEnd(ListNode* head, int n) {
        // ListNode* temp=head;
        if(size(head)>1)
        {
            if(n>1)
            {
                reverse(head, head);
                delete_n_th(head, n);
                reverse(head, head);
            }
            else if(n==1)
            {
                reverse(head, head);
                delete_from_head(head);
                reverse(head, head);
            }
            // else if(n== size(head))
            // {
            //     reverse(head, head);
            //     // delete_from_tail
            // }
            
        }
        else if(size(head)== 1 )
        {
           ListNode* del=head;
           head=NULL;
           delete del;
        //    return;
        }
        
         return head;

    }
};
// @lc code=end

