https://leetcode.com/problems/swapping-nodes-in-a-linked-list/description/
     ************* solution*********

/*
 * @lc app=leetcode id=1721 lang=cpp
 *
 * [1721] Swapping Nodes in a Linked List
 */

// @lc code=start
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    void reverse ( ListNode*& head,  ListNode*cur)
    {
        if(cur->next == NULL)
        {
            head= cur;
            return;
        }
        reverse(head, cur->next);
        cur->next->next= cur;
        cur->next= NULL;
    }

    int size(ListNode* head)
    {
        ListNode*temp=head;
        int cnt=0;
        while (temp != NULL)
        {
            cnt++;
           temp=temp->next;
        }
        return cnt;
        
    }
    void take_in(ListNode*& newhead, ListNode*& newtail, int val)
{
    ListNode* newnode= new ListNode(val);
    if(newhead== NULL)
    {
        newhead=newnode;
        newtail=newnode;
        return;
    }
    else 
    {
        newtail->next=newnode;
        newtail=newnode;
    }
}
 void change_pos(ListNode*&head, ListNode*&newhead, int k)
 {
    ListNode*i= head;
      ListNode* j= newhead;
      int pos=1;
      while (pos<k)
      {
        i=i->next;
        j=j->next;
        pos++;
      }
      swap(i->val, j->val);
 }
 void  print(ListNode*newhead)
 {
ListNode* temp=newhead;
while (temp != NULL)
{
  cout<<temp->val<<" ";
  temp=temp->next;
}

 }
    ListNode* swapNodes(ListNode* head, int k) 
    {

        ListNode*newhead= NULL;
        ListNode*newtail= NULL;
        ListNode *temp = head;
        while (temp != NULL)
        {
           take_in(newhead, newtail, temp->val);
           temp=temp->next;
        }
          reverse(newhead, newhead);
          
    change_pos(head, newhead, k);
    // print(head); cout<<endl<<"reverse"<<endl;
    // print(newhead);
     int kk=(size(head)+1)-k;
    change_pos(head, newhead, kk);
    // cout<<endl<<"2nd change print forward"<<endl;
    // print(head); cout<<endl<<"reverse"<<endl;
    // print(newhead);
    return head;
    }
    
};
// @lc code=end



